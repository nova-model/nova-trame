name: Build and Test

on: push

concurrency:
  group: "${{ github.ref }}"
  cancel-in-progress: true

env:
  NDIP_DOCKER_USER: "${{ secrets.NDIP_DOCKER_USER }}"
  NDIP_DOCKER_PASSWORD: "${{ secrets.NDIP_DOCKER_PASSWORD }}"
  NDIP_DOCKER_REPOSITORY: "${{ secrets.NDIP_DOCKER_REPOSITORY }}"

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      GIT_STRATEGY: clone
      IMAGE_NAME: "${NDIP_DOCKER_REPOSITORY}/${{ github.repository }}"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 20
          lfs: true

      # refer to nova-examples as reference for how to build with QEMU and load into CI
      - run: docker login -u $NDIP_DOCKER_USER -p $NDIP_DOCKER_PASSWORD $NDIP_DOCKER_REPOSITORY
      - run: export VERSION=$(cat pyproject.toml | grep "version =" | head -n 1 | awk '{ print $3 }' | tr -d '"')
      - run: docker build -f dockerfiles/Dockerfile --target source -t image .
      - run: docker run -u `id -u`:`id -g` image poetry run ruff check
      - run: docker run -u `id -u`:`id -g` image poetry run ruff format --check
      - run: docker run -u `id -u`:`id -g` image poetry run mypy .

      - run: mkdir reports
      - run: docker run -u `id -u`:`id -g` -v `pwd`/reports:/src/reports ${IMAGE_NAME}:src-${{ github.sha }} poetry run coverage run
      - run: docker run -u `id -u`:`id -g` -v `pwd`/reports:/src/reports ${IMAGE_NAME}:src-${{ github.sha }} poetry run coverage report
      - run: docker run -u `id -u`:`id -g` -v `pwd`/reports:/src/reports ${IMAGE_NAME}:src-${{ github.sha }} poetry run coverage xml -o reports/coverage.xml
      - run: sed -i "s:<source>/src:<source>${{ github.workspace }}/${{ github.repository }}:" reports/coverage.xml
      # need to figure out coverage rules

      - run: docker run -u `id -u`:`id -g` ${IMAGE_NAME}:src-${{ github.sha }} bash build_docs.sh
